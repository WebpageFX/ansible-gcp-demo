- name: Demo Ansible
  connection: local
  hosts: localhost
  vars:
    ssh_user: ansible
    ssh_key_path: /home/ansible/.ssh/id_rsa
    infrastructure_state: present
    # scopes:
    #   - https://www.googleapis.com/auth/compute
    instances:
      - instance-1
      # - instance-2
    network_name: default
    zone: us-central1-a
    region: us-central1
  tasks:
    # This could be performed by a role which is OS agnostic
    - name: Update apt
      apt:
        update_cache: yes
        cache_valid_time: 3600
      become: true
    - name: Ensure that pip is installed
      become: true
      package:
        name: pip
        state: present
    - name: Ensure that requests and google-auth are installed via pip
      pip:
        name:
          - requests
          - google-auth
        state: present
      become: true
    - name: Generate SSH key pair
      openssh_keypair:
        path: "{{ ssh_key_path }}"
        type: rsa
        comment: "ansible"
        size: 2048
      tags: ssh-keygen
    - name: Create network
      google.cloud.gcp_compute_network:
        name: "{{ network_name }}"
        auto_create_subnetworks: true
        project: "{{ ansible_env.GCP_PROJECT }}"
        auth_kind: "{{ ansible_env.GCP_AUTH_KIND }}"
        service_account_file: "{{ ansible_env.GCP_SERVICE_ACCOUNT_FILE }}"
        state: "{{ infrastructure_state }}"
      when: network_name != "default" and infrastructure_state == "present"
      register: network
      tags: network
    - name: Fetch network
      google.cloud.gcp_compute_network_info:
        filters:
        - name = "{{ network_name }}"
        project: "{{ ansible_env.GCP_PROJECT }}"
        auth_kind: "{{ ansible_env.GCP_AUTH_KIND }}"
        service_account_file: "{{ ansible_env.GCP_SERVICE_ACCOUNT_FILE }}"
      register: networks
      tags: network
    - name: Set network
      set_fact:
        network: "{{ networks.resources[0] }}"
      tags: network
    # - name: Add firewall rule default-allow-internal
    #   google.cloud.gcp_compute_firewall:
    #     name: default-allow-internal
    #     network: "{{ network }}"
    #     allowed:
    #     - ip_protocol: icmp
    #     - ip_protocol: tcp
    #       ports:
    #       - 0-65535
    #     - ip_protocol: udp
    #       ports:
    #       - 0-65535
    #     direction: INGRESS
    #     priority: 65534
    #     source_ranges:
    #     - 35.235.240.0/20
    #     state: "{{ infrastructure_state }}"
    #   tags: firewall
    #   when: network_name != "default"
    # - name: Add IAP firewall rule
    #   google.cloud.gcp_compute_firewall:
    #     name: default-allow-iap
    #     network: "{{ network }}"
    #     allowed:
    #     - ip_protocol: tcp
    #       ports:
    #       - 22
    #     - ip_protocol: tcp
    #       ports:
    #       - 3389
    #     direction: INGRESS
    #     priority: 65534
    #     source_ranges:
    #     -
    # https://stackoverflow.com/a/33533326
    - name: Allow SSH
      google.cloud.gcp_compute_firewall:
        name: "allow-ingresss-from-ssh-all"
        network: "{{ network }}"
        allowed:
        - ip_protocol: tcp
          ports:
          - 22
        source_ranges:
          - 0.0.0.0/0
        direction: INGRESS
        description: Allow SSH traffic
        project: "{{ ansible_env.GCP_PROJECT }}"
        auth_kind: "{{ ansible_env.GCP_AUTH_KIND }}"
        service_account_file: "{{ ansible_env.GCP_SERVICE_ACCOUNT_FILE }}"
        state: "{{ infrastructure_state }}"
      tags: firewall
    - name: Create instances
      include_tasks: instance-up.yml
      # When infrastructure_state ansible variable is "present", run this task
      loop: "{{ instances }}"
      when: infrastructure_state == "present"
      tags: instances
    - name: Delete instances
      include_tasks: instance-down.yml
      # When infrastructure_state ansible variable is "absent", run this task
      loop: "{{ instances }}"
      when: infrastructure_state == "absent"
    - name: Delete network
      google.cloud.gcp_compute_network:
        name: "{{ network_name }}"
        project: "{{ ansible_env.GCP_PROJECT }}"
        auth_kind: "{{ ansible_env.GCP_AUTH_KIND }}"
        service_account_file: "{{ ansible_env.GCP_SERVICE_ACCOUNT_FILE }}"
        state: "{{ infrastructure_state }}"
      register: network
      when: network_name != "default" and infrastructure_state == "absent"
      tags: network

